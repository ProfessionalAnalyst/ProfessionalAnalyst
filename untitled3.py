# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hP60ewOdiQSJ8CP5f4JjIrlENDl2iqjK
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy 
import networkx as nx
from tqdm import tqdm
import warnings
from statistics import median
import matplotlib.pyplot as plt
# %matplotlib inline
warnings.filterwarnings('ignore')

from google.colab import files
uploaded=files.upload()

df = pd.read_csv("Parnership2 (Recovered).csv")
df1 = df.dropna(axis=1)
df1.head()

#prepare dataframe for Supernovas
df_dc = df1[df['Team']=="Supernovas"]

df_dc['Partners']=[sorted([i,j]) for i,j in zip(df_dc['Player_1'],df_dc['Player_2'])]
df_dc['Partnerships']=["".join(i) for i in df_dc['Partners']]

df_dc.head()

# empty list to store players name
p1 = []
p2 = []

# empty lists to store median of runs scored
r1 = []
r2 = []

for p in df_dc['Partnerships'].unique():
  
  temp = df_dc[df_dc['Partnerships']==p]
  p1.append(temp.iloc[0]['Player_1'])
  p2.append(temp.iloc[0]['Player_2'])
  
  a=[]
  b=[]

  #Extract individual scores for both the players
  for index,row in temp.iterrows():
    #scores of player 1
    a.append(row['Score_1'])

    #scores of player 2
    b.append(row['Score_2'])

  #append median of scores
  r1.append(median(a))
  r2.append(median(b))

# aggregated batting-partnership data
Team_df =pd.DataFrame({'p1':p1,'p2':p2,'r1':r1,'r2':r2})
Team_df.head()

# find the leading batsman
Team_df['lead'] = numpy.where(Team_df['r1'] >= Team_df['r2'], Team_df['p1'], Team_df['p2'])
Team_df['follower'] = numpy.where(Team_df['lead'] == Team_df['p1'], Team_df['p2'], Team_df['p1'])
Team_df['larger_score'] = numpy.where(Team_df['r1'] >= Team_df['r2'], Team_df['r1'], Team_df['r2'])
Team_df['total_score'] = Team_df['r1'] + Team_df['r2']

# performance ratio
Team_df['performance'] = Team_df['larger_score']/(Team_df['total_score']+0.01)

#construct graph

G = nx.from_pandas_edgelist(Team_df,"follower","lead",['performance'], create_using=nx.MultiDiGraph())

#get edge weights

_, wt = zip(*nx.get_edge_attributes(G,'performance').items())

#plot graph
plt.figure(figsize=(9,9))
pos=nx.spring_layout(G,k=20,seed=21) #k regulates the distance between nodes
nx.draw(G,with_labels=True,node_color='skyblue',node_size=4000, pos=pos,edgelist=G.edges(),edge_color='g',arrowsize=15)
plt.show()

list(G.degree)

list(G.in_degree)