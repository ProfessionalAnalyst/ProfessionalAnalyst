# -*- coding: utf-8 -*-
"""ImageClassification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13j-m7Z0fkr212ZwZn5jrjG9FhlWMs0J4
"""

from google.colab import drive
drive.mount('/content/drive')

import os
os.chdir("/content/drive/")
!ls

import os
os.chdir("/content/drive/MyDrive/PROJECT_WORK/project_images")
!ls

import pandas as pd
train= pd.read_csv('/content/drive/MyDrive/PROJECT_WORK/project_images/train/images.csv')
train.head()



import os
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials
import keras
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
from tensorflow.keras.utils import to_categorical
from keras.preprocessing import image
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from tensorflow.keras.utils import to_categorical
from tqdm import tqdm

auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

from tensorflow.compat.v1 import ConfigProto
from tensorflow.compat.v1 import InteractiveSession

config = ConfigProto()
config.gpu_options.allow_growth = True
session = InteractiveSession(config=config)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D
from tensorflow.keras.layers import MaxPooling2D
from tensorflow.keras.layers import Flatten
from tensorflow.keras.layers import Dense
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import tensorflow as tf
tf.compat.v1.disable_eager_execution()
import matplotlib.pyplot as plt
import numpy as np

# Initialising the CNN
classifier = Sequential()

# Step 1 - Convolution
classifier.add(Conv2D(32, (3, 3), input_shape = (128, 128, 3), activation = 'relu'))

# Step 2 - Pooling
classifier.add(MaxPooling2D(pool_size = (2, 2)))

# Adding a second convolutional layer
classifier.add(Conv2D(32, (3, 3), activation = 'relu'))
classifier.add(MaxPooling2D(pool_size = (2, 2)))

# Step 3 - Flattening
classifier.add(Flatten())

# Step 4 - Full connection
classifier.add(Dense(units = 128, activation = 'relu'))
classifier.add(Dense(units = 6, activation = 'sigmoid'))

# Compiling the CNN
classifier.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])

train_datagen = ImageDataGenerator(rescale = 1./255, shear_range = 0.2, zoom_range = 0.2, horizontal_flip = True)

test_datagen = ImageDataGenerator(rescale = 1./255)

training_set = train_datagen.flow_from_directory('/content/drive/MyDrive/PROJECT_WORK/project_images/train', # relative path from working directoy
                                                 target_size = (128, 128),
                                                 batch_size = 6, class_mode = 'categorical')

valid_set = test_datagen.flow_from_directory('/content/drive/MyDrive/PROJECT_WORK/project_images/valid', # relative path from working directoy
                                             target_size = (128, 128), 
                                             batch_size = 3, class_mode = 'categorical')

valid_set.class_indices

model = tf.keras.models.Sequential([ tf.keras.layers.Conv2D(16,(3,3),activation='relu',input_shape =(128,128,3)),
                                    tf.keras.layers.MaxPool2D(2,2),
                                    #
                                    tf.keras.layers.Conv2D(32,(3,3),activation='relu'),
                                    tf.keras.layers.MaxPool2D(2,2),
                                    #
                                    tf.keras.layers.Conv2D(64,(3,3),activation='relu'),
                                    tf.keras.layers.MaxPool2D(2,2),
                                    #
                                    tf.keras.layers.Flatten(),
                                    #
                                    tf.keras.layers.Dense(512,activation='relu'),
                                    #
                                    tf.keras.layers.Dense(6,activation='sigmoid')]
    
)

model.compile(loss='categorical_crossentropy',
              optimizer ='adam',
              metrics=['accuracy'])

model_fit=model.fit(training_set,
                         steps_per_epoch = 20,
                         epochs = 40,
                         validation_data=valid_set
)

import cv2
from matplotlib import pyplot as plt

img = cv2.imread('/content/drive/MyDrive/PROJECT_WORK/project_images/train/sweep/3000.jpg')
img_resize = cv2.resize(img, (128,128))

#CV2 reads an image in BGR format. We need to convert it to RGB
b,g,r = cv2.split(img_resize)       # get b,g,r
rgb_img = cv2.merge([r,g,b])     # switch it to rgb

plt.imshow(rgb_img)
label_map = (training_set.class_indices)

print(label_map)
img_rank4 = np.expand_dims(rgb_img/255, axis=0)

from google.colab.patches import cv2_imshow
model.predict(img_rank4)
h = list(label_map.keys())[model.predict_classes(img_rank4)[0]]
font = cv2.FONT_HERSHEY_DUPLEX
img1 = cv2.putText(img, h, (10, 30), font, 1.0, (0, 0, 255), 1)
cv2_imshow(img1)
print(h)

import os
import glob

from google.colab.patches import cv2_imshow
dir_path ='/content/drive/MyDrive/PROJECT_WORK/project_images/test/*.jpg'
for i in  glob.glob(dir_path):
  img = cv2.imread(i)
  img_resize = cv2.resize(img,(128,128))
  b,g,r = cv2.split(img_resize)       
  rgb_img = cv2.merge([r,g,b])   
  plt.imshow(rgb_img)
  label_map = (training_set.class_indices)
  img_rank4 = np.expand_dims(rgb_img/255, axis=0)
  model.predict(img_rank4)
  h = list(label_map.keys())[model.predict_classes(img_rank4)[0]]
  font = cv2.FONT_HERSHEY_DUPLEX
  img1=cv2.putText(img, h, (10, 30), font, 1.0, (0, 0, 255), 1)
  cv2_imshow(img1)
  print(h)

